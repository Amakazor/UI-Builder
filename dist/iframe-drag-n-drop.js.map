{"version":3,"sources":["../src/iframe-drag-n-drop.js"],"names":["getCenterCoordinates","left","$element","offset","outerWidth","top","outerHeight","isAlign","targetOffset","currentOffset","isHorizontalAlign","Math","abs","isVerticalAlign","removeAlignmentLines","$","remove","self","arrowKeyMove","key","element","dx","dy","x","parseFloat","attr","y","css","transform","dragAlignmentLine","get","target","horizontalLineExists","verticalLineExists","Array","from","filter","currentValue","some","addClass","appendTo","document","ready","enteredDropzone","isDropzoneParent","parents","length","interact","dropzone","accept","overlap","ondropactivate","event","classList","add","ondragenter","draggableElement","relatedTarget","dropzoneElement","ondragleave","ondrop","ondropdeactivate","removeAttr","resizable","edges","right","bottom","restrictEdges","outer","endOnly","restrictSize","min","width","height","inertia","on","getAttribute","style","rect","deltaRect","console","log","webkitTransform","setAttribute","draggable","restrict","restriction","body","elementRect","autoScroll","onmove","onend","textEl","querySelector","textContent","sqrt","pow","pageX","x0","pageY","y0","toFixed"],"mappings":"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","file":"iframe-drag-n-drop.js","sourcesContent":["(function () {\r\n    const getCenterCoordinates = $element => ({\r\n        left: $element.offset().left + $element.outerWidth(true) / 2,\r\n        top: $element.offset().top + $element.outerHeight(true) / 2\r\n    });\r\n\r\n    const isAlign = (targetOffset, currentOffset) => ({\r\n        isHorizontalAlign: Math.abs(targetOffset.top - currentOffset.top) <= 1,\r\n        isVerticalAlign: Math.abs(targetOffset.left - currentOffset.left) <= 1\r\n    });\r\n\r\n    const removeAlignmentLines = () => $('.horizontal-line, .vertical-line').remove();\r\n\r\n    self.arrowKeyMove = (key, element) => {\r\n        removeAlignmentLines();\r\n\r\n        let dx = 0, dy = 0;\r\n        switch (key) {\r\n            case 37: // left\r\n                dx = -1;\r\n                break;\r\n            case 38: // up\r\n                dy = -1;\r\n                break;\r\n            case 39: // right\r\n                dx = 1;\r\n                break;\r\n            case 40: // down\r\n                dy = 1;\r\n                break;\r\n            default: return; // exit this handler for other keys\r\n        }\r\n\r\n        // keep the dragged position in the data-x/data-y attributes\r\n        const x = (parseFloat(element.attr('data-x')) || 0) + dx,\r\n            y = (parseFloat(element.attr('data-y')) || 0) + dy;\r\n\r\n        element.css({\r\n            transform: `translate(${x}px, ${y}px)`\r\n        });\r\n\r\n        // update the position attributes\r\n        element.attr('data-x', x);\r\n        element.attr('data-y', y);\r\n\r\n        dragAlignmentLine(element.get(0));\r\n    };\r\n\r\n    const dragAlignmentLine = (target) => {\r\n        let horizontalLineExists = false;\r\n        let verticalLineExists = false;\r\n        const targetOffset = $(target).offset();\r\n\r\n        Array.from($('body *:visible:not(script)'))\r\n            .filter(currentValue => currentValue != target)\r\n            .some(currentValue => {\r\n                const currentOffset = $(currentValue).offset();\r\n                const { isHorizontalAlign, isVerticalAlign } = isAlign(targetOffset, currentOffset);\r\n                if (!horizontalLineExists && isHorizontalAlign) {\r\n                    $('<hr />')\r\n                        .addClass('horizontal-line')\r\n                        .css({\r\n                            top: targetOffset.top\r\n                        })\r\n                        .appendTo($('body'));\r\n                    horizontalLineExists = true;\r\n                }\r\n                if (!verticalLineExists && isVerticalAlign) {\r\n                    $('<hr />')\r\n                        .addClass('vertical-line')\r\n                        .css({\r\n                            left: targetOffset.left\r\n                        })\r\n                        .appendTo($('body'));\r\n                    verticalLineExists = true;\r\n                }\r\n                return horizontalLineExists && verticalLineExists;\r\n            });\r\n    };\r\n\r\n    $(document).ready(() => {\r\n        let enteredDropzone = false;\r\n        const isDropzoneParent = element => !!$(element).parents('.dropzone').length;\r\n\r\n        // enable draggables to be dropped into this\r\n        interact('.dropzone')\r\n            .dropzone({\r\n                // only accept elements matching this CSS selector\r\n                accept: 'body *',\r\n                // Require a 75% element overlap for a drop to be possible\r\n                overlap: 0.50,\r\n                // listen for drop related events:\r\n                ondropactivate: function (event) {\r\n                    // add active dropzone feedback\r\n                    event.target.classList.add('drop-active');\r\n                },\r\n                ondragenter: function (event) {\r\n                    var draggableElement = event.relatedTarget,\r\n                        dropzoneElement = event.target;\r\n\r\n                    // feedback the possibility of a drop\r\n                    dropzoneElement.classList.add('drop-target');\r\n                    draggableElement.classList.add('can-drop');\r\n                },\r\n                ondragleave: function (event) {\r\n                    // remove the drop feedback style\r\n                    event.target.classList.remove('drop-target');\r\n                    event.relatedTarget.classList.remove('can-drop');\r\n                    enteredDropzone = false;\r\n                },\r\n                ondrop: event => enteredDropzone = true,\r\n                ondropdeactivate: function (event) {\r\n                    // remove active dropzone feedback\r\n                    event.target.classList.remove('drop-active');\r\n                    event.target.classList.remove('drop-target');\r\n\r\n                    if (enteredDropzone && !isDropzoneParent(event.relatedTarget)) {\r\n                        $(event.relatedTarget)\r\n                            .removeAttr('data-x data-y')\r\n                            .css({\r\n                                left: 0,\r\n                                top: 0,\r\n                                transform: ''\r\n                            });\r\n                        $(event.relatedTarget).appendTo($(event.target));\r\n                    } else if (!enteredDropzone && isDropzoneParent(event.relatedTarget)) {\r\n                        $(event.relatedTarget).appendTo($('body'));\r\n                    }\r\n                }\r\n            })\r\n            .resizable({\r\n                // resize from all edges and corners\r\n                edges: { left: true, right: true, bottom: true, top: true },\r\n\r\n                // keep the edges inside the parent\r\n                restrictEdges: {\r\n                    outer: 'parent',\r\n                    endOnly: true,\r\n                },\r\n\r\n                // minimum size\r\n                restrictSize: {\r\n                    min: { width: 100, height: 50 },\r\n                },\r\n\r\n                inertia: true,\r\n            })\r\n            .on('resizemove', function (event) {\r\n                var target = event.target,\r\n                    x = (parseFloat(target.getAttribute('data-x')) || 0),\r\n                    y = (parseFloat(target.getAttribute('data-y')) || 0);\r\n\r\n                // update the element's style\r\n                target.style.width = event.rect.width + 'px';\r\n                target.style.height = event.rect.height + 'px';\r\n\r\n                // translate when resizing from top or left edges\r\n                x += event.deltaRect.left;\r\n                y += event.deltaRect.top;\r\n                console.log(x, y);\r\n\r\n                target.style.webkitTransform = target.style.transform =\r\n                    'translate(' + x + 'px,' + y + 'px)';\r\n\r\n                target.setAttribute('data-x', x);\r\n                target.setAttribute('data-y', y);\r\n            });\r\n\r\n        interact('body *')\r\n            .draggable({\r\n                // enable inertial throwing\r\n                inertia: true,\r\n                // keep the element within the area of it's parent\r\n                restrict: {\r\n                    restriction: document.body,\r\n                    endOnly: true,\r\n                    elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\r\n                },\r\n                // enable autoScroll\r\n                autoScroll: true,\r\n\r\n                // call this function on every dragmove event\r\n                onmove: event => {\r\n                    removeAlignmentLines();\r\n                    var target = event.target,\r\n                        // keep the dragged position in the data-x/data-y attributes\r\n                        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,\r\n                        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\r\n\r\n                    // translate the element\r\n                    target.style.webkitTransform =\r\n                        target.style.transform =\r\n                        'translate(' + x + 'px, ' + y + 'px)';\r\n\r\n                    // update the posiion attributes\r\n                    target.setAttribute('data-x', x);\r\n                    target.setAttribute('data-y', y);\r\n\r\n                    dragAlignmentLine(target);\r\n                },\r\n                // call this function on every dragend event\r\n                onend: event => {\r\n                    removeAlignmentLines();\r\n\r\n                    var textEl = event.target.querySelector('p');\r\n\r\n                    textEl && (textEl.textContent =\r\n                        'moved a distance of '\r\n                        + (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                            Math.pow(event.pageY - event.y0, 2) | 0))\r\n                            .toFixed(2) + 'px');\r\n                }\r\n            });\r\n\r\n    });\r\n})();"]}