{"version":3,"sources":["../src/iframe-drag-n-drop.js"],"names":["getCenterCoordinates","left","$element","offset","width","top","height","removeAlignmentLines","$","remove","document","ready","interact","draggable","inertia","restrict","restriction","body","endOnly","elementRect","bottom","right","autoScroll","onmove","target","event","x","parseFloat","getAttribute","dx","y","dy","style","webkitTransform","transform","setAttribute","targetCenter","Array","from","filter","currentValue","some","currentCenter","isHorizontalAlign","Math","abs","isVerticalAlign","console","log","addClass","css","appendTo","onend","textEl","querySelector","textContent","sqrt","pow","pageX","x0","pageY","y0","toFixed"],"mappings":"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","file":"iframe-drag-n-drop.js","sourcesContent":["(function () {\r\n    const getCenterCoordinates = $element => ({\r\n        left: $element.offset().left + $element.width() / 2,\r\n        top: $element.offset().top + $element.height() / 2\r\n    });\r\n\r\n    const removeAlignmentLines = () => $('.horizontal-line, .vertical-line').remove();\r\n\r\n    $(document).ready(() => {\r\n        interact('body *')\r\n            .draggable({\r\n                // enable inertial throwing\r\n                inertia: true,\r\n                // keep the element within the area of it's parent\r\n                restrict: {\r\n                    restriction: document.body,\r\n                    endOnly: true,\r\n                    elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\r\n                },\r\n                // enable autoScroll\r\n                autoScroll: true,\r\n\r\n                // call this function on every dragmove event\r\n                onmove: event => {\r\n                    removeAlignmentLines();\r\n\r\n                    var target = event.target,\r\n                        // keep the dragged position in the data-x/data-y attributes\r\n                        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,\r\n                        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\r\n\r\n                    // translate the element\r\n                    target.style.webkitTransform =\r\n                        target.style.transform =\r\n                        'translate(' + x + 'px, ' + y + 'px)';\r\n\r\n                    // update the posiion attributes\r\n                    target.setAttribute('data-x', x);\r\n                    target.setAttribute('data-y', y);\r\n\r\n                    const targetCenter = getCenterCoordinates($(target));\r\n                    Array.from($('body *:visible:not(script)'))\r\n                        .filter(currentValue => currentValue != target)\r\n                        .some(currentValue => {\r\n                            const currentCenter = getCenterCoordinates($(currentValue));\r\n                            const isHorizontalAlign = Math.abs(targetCenter.top - currentCenter.top) <= 1;\r\n                            const isVerticalAlign = Math.abs(targetCenter.left - currentCenter.left) <= 1;\r\n                            console.log(isVerticalAlign);\r\n                            if (isHorizontalAlign) {\r\n                                $('<hr />')\r\n                                    .addClass('horizontal-line')\r\n                                    .css({\r\n                                        top: $(target).offset().top\r\n                                    })\r\n                                    .appendTo($('body'));\r\n                            }\r\n                            if (isVerticalAlign) {\r\n                                $('<hr />')\r\n                                    .addClass('vertical-line')\r\n                                    .css({\r\n                                        left: $(target).offset().left\r\n                                    })\r\n                                    .appendTo($('body'));\r\n                            }\r\n                            return isHorizontalAlign || isVerticalAlign;\r\n                        });\r\n                },\r\n                // call this function on every dragend event\r\n                onend: event => {\r\n                    var textEl = event.target.querySelector('p');\r\n\r\n                    textEl && (textEl.textContent =\r\n                        'moved a distance of '\r\n                        + (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                            Math.pow(event.pageY - event.y0, 2) | 0))\r\n                            .toFixed(2) + 'px');\r\n                }\r\n            })\r\n        // .resizable({\r\n        //     // resize from all edges and corners\r\n        //     edges: { left: true, right: true, bottom: true, top: true },\r\n\r\n        //     // keep the edges inside the parent\r\n        //     restrictEdges: {\r\n        //         outer: 'parent',\r\n        //         endOnly: true,\r\n        //     },\r\n\r\n        //     // minimum size\r\n        //     restrictSize: {\r\n        //         min: { width: 100, height: 50 },\r\n        //     },\r\n\r\n        //     inertia: true,\r\n        // })\r\n        // .on('resizemove', function (event) {\r\n        //     var target = event.target,\r\n        //         x = (parseFloat(target.getAttribute('data-x')) || 0),\r\n        //         y = (parseFloat(target.getAttribute('data-y')) || 0);\r\n\r\n        //     // update the element's style\r\n        //     target.style.width = event.rect.width + 'px';\r\n        //     target.style.height = event.rect.height + 'px';\r\n\r\n        //     // translate when resizing from top or left edges\r\n        //     x += event.deltaRect.left;\r\n        //     y += event.deltaRect.top;\r\n\r\n        //     target.style.webkitTransform = target.style.transform =\r\n        //         'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        //     target.setAttribute('data-x', x);\r\n        //     target.setAttribute('data-y', y);\r\n        //     target.textContent = Math.round(event.rect.width) + '\\u00D7' + Math.round(event.rect.height);\r\n        // });\r\n    });\r\n})();"]}