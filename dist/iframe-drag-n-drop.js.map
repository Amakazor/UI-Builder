{"version":3,"sources":["../src/iframe-drag-n-drop.js"],"names":["getCenterCoordinates","left","$element","offset","outerWidth","top","outerHeight","isAlign","targetOffset","currentOffset","isHorizontalAlign","Math","abs","isVerticalAlign","removeAlignmentLines","$","remove","self","arrowKeyMove","key","element","dx","dy","x","parseFloat","attr","y","css","transform","dragAlignmentLine","get","target","horizontalLineExists","verticalLineExists","Array","from","filter","currentValue","some","addClass","appendTo","document","ready","interact","draggable","inertia","restrict","restriction","body","endOnly","elementRect","bottom","right","autoScroll","onmove","event","getAttribute","style","webkitTransform","setAttribute","onend","console","log","textEl","querySelector","textContent","sqrt","pow","pageX","x0","pageY","y0","toFixed"],"mappings":"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","file":"iframe-drag-n-drop.js","sourcesContent":["(function () {\r\n    const getCenterCoordinates = $element => ({\r\n        left: $element.offset().left + $element.outerWidth(true) / 2,\r\n        top: $element.offset().top + $element.outerHeight(true) / 2\r\n    });\r\n\r\n    const isAlign = (targetOffset, currentOffset) => ({\r\n        isHorizontalAlign: Math.abs(targetOffset.top - currentOffset.top) <= 1,\r\n        isVerticalAlign: Math.abs(targetOffset.left - currentOffset.left) <= 1\r\n    });\r\n\r\n    const removeAlignmentLines = () => $('.horizontal-line, .vertical-line').remove();\r\n\r\n    self.arrowKeyMove = (key, element) => {\r\n        removeAlignmentLines();\r\n\r\n        let dx = 0, dy = 0;\r\n        switch (key) {\r\n            case 37: // left\r\n                dx = -1;\r\n                break;\r\n            case 38: // up\r\n                dy = -1;\r\n                break;\r\n            case 39: // right\r\n                dx = 1;\r\n                break;\r\n            case 40: // down\r\n                dy = 1;\r\n                break;\r\n            default: return; // exit this handler for other keys\r\n        }\r\n\r\n        // keep the dragged position in the data-x/data-y attributes\r\n        const x = (parseFloat(element.attr('data-x')) || 0) + dx,\r\n            y = (parseFloat(element.attr('data-y')) || 0) + dy;\r\n\r\n        element.css({\r\n            transform: `translate(${x}px, ${y}px)`\r\n        });\r\n\r\n        // update the position attributes\r\n        element.attr('data-x', x);\r\n        element.attr('data-y', y);\r\n\r\n        dragAlignmentLine(element.get(0));\r\n    };\r\n\r\n    const dragAlignmentLine = (target) => {\r\n        let horizontalLineExists = false;\r\n        let verticalLineExists = false;\r\n        const targetOffset = $(target).offset();\r\n\r\n        Array.from($('body *:visible:not(script)'))\r\n            .filter(currentValue => currentValue != target)\r\n            .some(currentValue => {\r\n                const currentOffset = $(currentValue).offset();\r\n                const { isHorizontalAlign, isVerticalAlign } = isAlign(targetOffset, currentOffset);\r\n                if (!horizontalLineExists && isHorizontalAlign) {\r\n                    $('<hr />')\r\n                        .addClass('horizontal-line')\r\n                        .css({\r\n                            top: targetOffset.top\r\n                        })\r\n                        .appendTo($('body'));\r\n                    horizontalLineExists = true;\r\n                }\r\n                if (!verticalLineExists && isVerticalAlign) {\r\n                    $('<hr />')\r\n                        .addClass('vertical-line')\r\n                        .css({\r\n                            left: targetOffset.left\r\n                        })\r\n                        .appendTo($('body'));\r\n                    verticalLineExists = true;\r\n                }\r\n                return horizontalLineExists && verticalLineExists;\r\n            });\r\n    };\r\n\r\n    $(document).ready(() => {\r\n        interact('body *')\r\n            .draggable({\r\n                // enable inertial throwing\r\n                inertia: true,\r\n                // keep the element within the area of it's parent\r\n                restrict: {\r\n                    restriction: document.body,\r\n                    endOnly: true,\r\n                    elementRect: { top: 0, left: 0, bottom: 1, right: 1 }\r\n                },\r\n                // enable autoScroll\r\n                autoScroll: true,\r\n\r\n                // call this function on every dragmove event\r\n                onmove: event => {\r\n                    removeAlignmentLines();\r\n                    var target = event.target,\r\n                        // keep the dragged position in the data-x/data-y attributes\r\n                        x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,\r\n                        y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\r\n\r\n                    // translate the element\r\n                    target.style.webkitTransform =\r\n                        target.style.transform =\r\n                        'translate(' + x + 'px, ' + y + 'px)';\r\n\r\n                    // update the posiion attributes\r\n                    target.setAttribute('data-x', x);\r\n                    target.setAttribute('data-y', y);\r\n\r\n                    dragAlignmentLine(target);\r\n                },\r\n                // call this function on every dragend event\r\n                onend: event => {\r\n                    console.log(event);\r\n                    console.log('test drag area-------------------------------');\r\n                    removeAlignmentLines();\r\n\r\n                    var textEl = event.target.querySelector('p');\r\n\r\n                    textEl && (textEl.textContent =\r\n                        'moved a distance of '\r\n                        + (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n                            Math.pow(event.pageY - event.y0, 2) | 0))\r\n                            .toFixed(2) + 'px');\r\n                }\r\n            })\r\n        // .resizable({\r\n        //     // resize from all edges and corners\r\n        //     edges: { left: true, right: true, bottom: true, top: true },\r\n\r\n        //     // keep the edges inside the parent\r\n        //     restrictEdges: {\r\n        //         outer: 'parent',\r\n        //         endOnly: true,\r\n        //     },\r\n\r\n        //     // minimum size\r\n        //     restrictSize: {\r\n        //         min: { width: 100, height: 50 },\r\n        //     },\r\n\r\n        //     inertia: true,\r\n        // })\r\n        // .on('resizemove', function (event) {\r\n        //     var target = event.target,\r\n        //         x = (parseFloat(target.getAttribute('data-x')) || 0),\r\n        //         y = (parseFloat(target.getAttribute('data-y')) || 0);\r\n\r\n        //     // update the element's style\r\n        //     target.style.width = event.rect.width + 'px';\r\n        //     target.style.height = event.rect.height + 'px';\r\n\r\n        //     // translate when resizing from top or left edges\r\n        //     x += event.deltaRect.left;\r\n        //     y += event.deltaRect.top;\r\n\r\n        //     target.style.webkitTransform = target.style.transform =\r\n        //         'translate(' + x + 'px,' + y + 'px)';\r\n\r\n        //     target.setAttribute('data-x', x);\r\n        //     target.setAttribute('data-y', y);\r\n        //     target.textContent = Math.round(event.rect.width) + '\\u00D7' + Math.round(event.rect.height);\r\n        // });\r\n    });\r\n})();"]}